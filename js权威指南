1.  自动分号：并不是在所有断行出添加分号，如果当前断行处的语句和随后的字符不能当成一个整体来解析的时候，自动添加分号。
    有些情况下，在代码初始位置增加分号，避免当前代码和之前代码整体解析
    return break continue 换行出自动增加分号
    x
    ++
    y
    解析为x;++y;

2.  x = 1;y = 1;
    ++x; 返回2 x变为2
    y++; 返回1 y变为2

3.  Math
    Math.pow(2,10)      ---------> 2的10次方
    Math.round(1.666)   ---------> 1.66保留0个小数，四舍五入取整数
    Math.ceil(0.4)      ---------> 向上取整，保留整数，返回值大于等于原始值
    Math.floor(1.2)     ---------> 向下取整，保留整数，返回值小于等于原始值
    Math.abs(-5)        ---------> 取绝对值
    Math.max(x,y,z)     ---------> 取最大值
    Math.min(x,y,z)     ---------> 取最小值
    Math.random()       ---------> 生成0-1之间的随机数
    0做除数，0做被除数，返回NaN   0/0----->NaN
    0做除数，非0做被除数，返回Infinity  1/0----->Infinity
    0做除数，取余，返回NaN
    NaN和任何值都不相等，包括自身，使用 x!=x 判断是否为NaN

4.  Date
    日期对象相减，计算两个日期之间的差值，单位毫秒
    var a = new Date();var b = new Date(); b - a

5.  真假值
    undefined null 0  -0 '' NaN 转换成boolean值都为false
    Infinity 转换为真假值为true

6.  null和undefined
    null是关键字，undefined不是关键字，是全局变量
    typeof null         ---> object
    typeof undefined    ---> undefined
    null == undefined   ---> true
    null === undefined  ---> false

7.  原始值
    1.包装对象
        对原始值（Number，Boolean，String）做属性的操作，会先将原始值转换为对象，然后调用对象的属性，调用完毕后，临时对象销毁
        var str = 'test';
        str.len = 4;
        console.log(str.len)  ----> undefined
    2.不可变的原始值
        原始值不可变更，通过原始值的方法获取新的原始值，实际上新生成了一个原始值，没有改变原始值本身
        var s = 'hello';
        s.toUpperCase();
        console.log(s) -----> 'hello'

8.  类型转换
    值：                    转换为：

                            字符串：                                            数字：              布尔值
    undefined               'undefined'                                         NaN                 false
    null                    'null'                                              0                   false
    true                    'true'                                              1                   true
    false                   'false'                                             0                   false
    ""                      ''                                                  0                   false
    "1.2"                   '1.2'                                               1.2                 true
    "ab"                    'ab'                                                NaN                 true
    0                       '0'                                                 0                   false
    -0                      '0'                                                 0                   false
    NaN                     'NaN'                                               NaN                 false
    Infinity                'Infinity'                                          Infinity            true
    -Infinity               '-Infinity'                                         -Infinity           true
    1                       '1'                                                 1                   true
    {}                      '[object Object]'                                   NaN                 true
    []                      ''                                                  0                   true
    [9]                     '9'                                                 9                   true
    ['a']                   使用join方法                                        NaN                  true
    function(){alert(1)}    'function(){alert(1)}'                              NaN                 true
    new Date()              Wed Mar 02 2016 11:15:15 GMT+0800 (中国标准时间)"   1456888515932        true

    对象转换为字符串，先调用toString方法，没有toString方法，调用valueOf方法，获得原始值，若原始值不为字符串，将原始值转换为字符串
    对象转换为数字，先调用valueOf方法，没有valueOf方法或返回的不为原始值，调用toString方法，获得原始值，并将原始值转换为数字

9.变量作用域
    全局变量，全局作用域，在代码任何地方都有定义。
    局部变量，函数内声明的变量，只在函数内有定义，函数参数也是局部变量。
    javascript没有块级作用域，只有函数作用域。变量在声明他们的函数体以及这个函数体嵌套的任意函数体内都有定义。
    声明提前，在函数体内任意部分定义的变量，都会提前至函数顶部声明，但变量初始化保留在原来的位置。

10. “+” 运算符
    可以字符串拼接，可以数字相加，转换规则优先考虑字符串
    如果一个操作数是对象，将对象转换为原始值，日期类型调用toString方法，其他对象调用valueOf方法，如果返回值是对象，在调用toString方法
    如果经过对象转换为原始值之后，有一个操作数是字符串，进行字符串的拼接操作
    否则都转换为数字，进行数字相加的操作

    “~” 运算符
    按位非，改变符号并减1

11. 非严格相等“==” 优先考虑数字相等
    一个是null，一个undefined，二者相等,与其他原始值都不相等
    一个数字，一个字符串，将字符串转换为数字，进行比较
    包含布尔值，将布尔值转换为数字，再进行比较，true-->1,false-->0
    如果一个值是对象，日期对象调用toString方法获取原始值，其他对象调用valueOf获取原始值，若不为原始值，在调用valueOf获取原始值


12. eval
    使用调用它的变量作用域环境，查找变量和定义新变量和函数操作和局部作用域中的代码完全一样。
    使用别名调用eval，它的变量作用域将是顶层作用域

13. delete
    通过var 创建的变量，无法删除
    删除成功，返回true，删除失败，返回false

14. 逗号运算符
    先计算所侧表达式，在计算右侧表达式，最后返回右侧表达式的值

15. 函数定义方式
    函数声明语句   function fn(){};            //函数名称和函数体均提前
    函数定义表达式 var fn = function(){};

16. 条件语句
    if else     ：else总是找离自己最近的if
    switch      ：return和break用于终止switch语句，没有break和return，一直执行
                  参数与case子句进行完全相等的判断，不会进行类型转换，没有找到case，会执行default
                  default语句可以在任何位置
    break       : 跳出整个循环
    continue    : 跳出本次循环
    with(obj)   : 改变作用域,将obj添加至作用域的顶部，只能读取和修改obj的属性，不能创建obj的属性

17. 严格模式------------5.7.3   114页，pdf--126
    //TODO 详细学习


18. 对象
    最顶级圆形链：Object.prototype
    Object.prototype 是只读的，无法赋值修改，赋值修改不会报错，但ES5中任何失败的属性赋值操作都会抛出类型错误异常
    对象查询属性的时候，用到原型链，对属性赋值与原型链无关
    delete 只能删除自由属性，不能删除继承属性
    hasOwnProperty(x) 检测对象是否包含自由属性x
    propertyIsEnumerable(x) 检测对象是否包含自由属性x，且x是可枚举的
    Object.keys(obj) : 枚举对象obj所有可枚举的自由属性名，返回数组
    Object.getOwnPropertyNames(obj): 枚举对象所有自由属性名，返回数组

19. 对象属性 getter setter
    //TODO 详细学习

20. Object.defineProperty(object, propertyname, descriptor) 将属性添加到对象，或修改现有属性的特性。
    第一个参数为添加属性的对象，第二个参数为添加的属性，第三个参数为属性描述符，可以通过添加get，set方法，实现数据绑定联动



    Object.getOwnPropertyDescriptor(obj, "newDataProperty"); 获取属性的配置，值/可写/可枚举/可配置
    //TODO 详细学习



21. 数组对象
    数组索引访问比对象的属性访问要快
    容许结尾有',' [1,2,3,].length 长度为3
    array.length = 0 数组清空
    使用delete 删除数组元素，将对应索引的元素改成undefined 不会修改数组的长度，变为稀疏数组
    稀疏数组，元素未定义；将元素值修改为undefined不会变为稀疏数组

    ES3
    push        末尾插入元素，返回数组长度
    unshift     首部插入元素，返回数组长度
    pop         删除末尾元素，返回删除的元素
    shift       删除首部元素，返回删除的元素
    splice      指定位置，插入，删除或替换数组元素，原数组发生变化，返回删除的元素组成的数组
    join        将数组内容转换为字符串，默认由，分隔 eg:[{a:1},2,3,4,5,['a','b']].join() --->[object Object],2,3,4,5,a,b
    reverse     将数组顺序反转，原数组发生变换，返回反转后的数组
    sort        传比较函数，参数为两个元素，当第一个元素在前，返回小于0的数，第二个参数在前返回大于0的数，原数组发生变化，返回排序后的数组
    slice       截取数组内容，参数为开始位置和结束位置，不改变原数组，返回截取的元素组成的数组 .slice() 复制数组，浅拷贝
    concat      连接数组，返回新数组，不改变原数组

    ES5
    forEach     用作循环，第一个参数为当前元素，第二个参数为当前索引，第三个元素为数组本身
    map         将数组元素传递给指定函数，并返回一个数组，包含该函数的返回值组成的数组，不会跳过稀疏数组，不会改变数组自身
    filter      返回数组元素是调用数组的子集，传递函数返回boolean值，判断是否返回该元素，会跳过稀疏数组，不会改变数组自身
    every       对数组进行逻辑判断，返回boolean，所有元素调用判定函数返回值都为true，返回true，否则返回false
    some        对数组进行逻辑判断，返回boolean，至少有一个元素调用判定函数返回值为true，返回true，都不为true，返回false
    reduce      化简函数，接受两个参数，第一个是化简函数，第二个是初始值，在化简函数中有两个参数，第一个为化简后的值，第二个为循环的值，将化简值返回
    reduceRight 化简函数，功能同reduce，不过计算方式由右至左
    indexOf     搜索整个数组中具有指定值的元素，找到第一个元素的索引，没有返回-1，第二个参数为指定的搜索位置
    lastIndexOf 功能同indexOf，反向搜索，返回的值是从左至右计算的

    数组方法用于string中,对于会改变数组原始值的方法，对于字符串不会生效(push pop unshift shift reverse sort splice)

23. 函数
    函数表达式可以包含名称，用于递归中调用自身
    函数调用，非严格模式this代表window，严格模式this为undefined
    arguments.callee 代表当前函数，arguments.caller 代表调用当前函数的函数，严格模式下，二者不被容许使用

24. 闭包
    函数变量作用域在函数创建时确定
    函数定义时的作用域链到函数执行时依然有效
    每次调用函数时，都会新生成一个对象用于保存局部变量，并将这个新对象放到作用域链的顶端，当函数调用结束时，将这个对象从作用域链的顶端删掉，若不存在闭包，这个对象会被垃圾回收
    若在这个函数内定义了嵌套函数，在嵌套函数定义时，嵌套函数的作用域链被定义，作用域链包括了外部函数的作用域链和外部函数调用时生成的用于保存局部变量的对象
    若嵌套函数没有被保存，则嵌套函数及外部函数的局部变量都会被垃圾回收，若嵌套函数被保存，则外部函数的局部变量对象被保存下来，不会被垃圾回收

25. call apply
    非严格模式中，第一个参数为undefined或者null，被转换为window，原始值转换为包装对象
    严格模式中，第一个参数不论传什么，都会被当做this使用

26. Function 构造函数
    var f = new Function('x','y','return x + y;') ----> var f = function(x,y){return x + y;}
    最后一个实参所表示的文本代表函数体
    在javascript运行时动态创建并编译函数
    通过构造函数创建的函数不使用词法作用域，函数体的编译总会在顶层作用域中

27. 高阶函数，不完全函数，记忆函数 TODO --- 206 页

28. 正则字符
    [...]   方括号内的任意一个字符
    [^...]  非方括号内的任意一个字符
    .       除换行符和终止符的任意字符
    \w      任何ASCII字符，等价于[a-zA-Z0-9]
    \W      非任何ASCII字符，等价于[^a-zA-Z0-9]
    \s      空白符
    \S      非空白符
    \d      数字
    \D      非数字

    +       匹配前一项1次或多次
    ?       匹配前一项0次或1次
    *       匹配前一项0次或多次
    {n,m}   匹配前一项n到m次
    {n,}    匹配前一项n次或更多次
    {n}     匹配前一项n次

    贪婪匹配        默认为贪婪匹配，匹配尽可能多的字符串  /a+/   aaa   匹配aaa
    非贪婪匹配      待匹配的字符串后加?                   /a+?/  aaa   匹配a
    eg：模式匹配总是会寻找字符串中第一个可能匹配的位置    /a+?b/ aaab  匹配aaab

    |       选择,分隔供选择的字符,从左至右匹配,如果左边找到,就忽略右边的匹配项
    ()      定义子模式
    \1,\2   引用,通过在字符\后增加数字,指定了带圆括号的子表达式在正则中的位置,指的是与这个模式匹配的字符的引用
    (?:)    不会创建子模式及索引

    断言，*不占用匹配位置*
    正向先行断言：(?=xxx) 只有后面满足xxx才会匹配
    负向先行断言：(?!xxx) 只有后面不满足xxx才会匹配

    正则方法：String
    search  接受正则对象为参数，不支持全局匹配，返回匹配的字符串位置，没有匹配，返回-1
    replace 接受两个参数，第一个参数为正则对象或字符串，第二个参数可以是字符串，且字符串中可以使用正则索引，用于替换，第二个参数也可以是函数
    match   接受一个正则参数，若不为全局模式，


ES6

1.  let:    定义变量,作用域在块级作用域内
2.  const:  常量索引,内存中的指针不能够改变,但指向这个变量的值可以改变,用于定义对象,不可变更



下本书




5. 如果实现promise模式
8. 前端路由在不同浏览器是怎么实现的

10. 作用域申明提升问题
13. cmd amd 的详细区别
3. 属性方法 原型方法区别
2. js增删改查
4. jquery 支持的最大数是多少
8. new一个对象, this赋值为空会不会报错
9. css请浮动方法
15. xss csrf
写一个选择器，支持id,className,tagName，要考虑性能和兼容性
viewport
矩阵
1.列举常用的三种清楚浮动的方法。
2.利用css实现文本超出显示省略号。
7.写一个getparents方法获取某一个dom元素的所有父级元素。
10.列举js中的两种以上异步执行或多线程的实现。














